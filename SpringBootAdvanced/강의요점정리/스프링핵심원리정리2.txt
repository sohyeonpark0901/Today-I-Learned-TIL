1. 프록시
"클라이언트와 서버" : 클라이언트는 서버에 필요한 것을 요청하고, 서버는 클라이언트의 요청을 처리하는 것이다.

그런데 클라이언트가 요청한 결과를 서버에 직접 요청하는 것이 아니라 어떤 대리자를 통해서 대신 간접적으로 서버에 요청할 수 있다.
여기서 "대리자"를 영어로 프록시(Proxy)라 한다.

"예시"
엄마에게 라면을 사달라고 부탁했는데, 엄마는 그 라면은 이미 집에 있다고 할 수도 있다. 그러면 기대한 것보다 더 빨리 라면을 먹을 수 있다.(접근제어, 캐싱)
아버지께 자동차 주유를 부탁했는데, 아버지가 주유 뿐만 아니라 세차까지 하고 왔다. 클라이언트가 기대한 것 외에 세차라는 부가 기능까지 얻게 되었다.(부가 기능 추가)
그리고 대리자가 또다른 대리자를 부를수도 있다.(프록시 체인)

2. 프록시 역할
"대체 가능"
객체에서 프록시가 되려면, 클라이언트는 서버에게 요청을 한것인지, 프록시에게 요청한 것인지 조차 몰라야 한다.
쉽게 이야기해서 서버와 프록시는 같은 인터페이스를 사용해야 한다. 
그리고 클라이언트가 사용하는 서버 객체를 프록시 객체로 변경해도 클라이언트 코드를 변경하지 않고 동작할 수 있어야 한다.

3. 프록시 주요 역할
- 접근 제어
	- 권한에 따른 접근 차단
	- 캐싱
	- 지연 로딩
- 부가 기능 추가
	- 원래 서버가 제공하는 기능에 더해서 부가 기능을 수행한다.
	- 예) 요청 값이나, 응답 값을 중간에 변형한다
	- 예) 실행 시간을 측정해서 추가 로그를 남긴다.

4. GOF 디자인 패턴
둘다 프록시를 사용하는 방법이지만 GOF 디자인 패턴에서는 이 둘을 의도(intent)에 따라 프록시 패턴과 데코레이터 패턴으로 구분한다.
- 프록시 패턴 : 접근 제어가 원칙
- 데코레이터 패턴 : 새로운 기능 추가가 목적
둘다 프록시를 사용하지만 의도가 다르다는 점이 핵심이다. 용어가 프록시 패턴이라고 해서 이 패턴만 프록시를 사용하는 것은 아니다.

* 참고 *
프록시라는 개념은 클라이언트 서버라는 큰 개념안에서 자연스럽게 발생할 수 있다. 프록시는 객체안에서의 개념도 있고, 웹 서버에서의 프록시도 있다.
객체안에서 구현되어있는가, 웹서버로 구현되어 있는가 처럼 규모의 차이가 있을 뿐 근본적인 역할은 같다.

5. 프록시 패턴과 데코레이터 패턴 정리
여기서 생각해보면서 Decorator 기능에 일부 중복이 있다. 꾸며주는 역할을 하는 Decorator들은 스스로 존재할 수 없다. 항상 꾸며줄 대상이 있어야 한다.
따라서 내부에 호출 대상인 component를 가지고 있어야 한다. 그리고 component를 항상 호출해야 한다. 이부분이 중복이다. 이런 중복을 제거하기 위해 component를
속성으로 가지고 있는 Decorator라는 추상 클래스를 만드는 방법도 고민할 수 있다. 이렇게 하면 추가로 클래스 다이어그램에서 어떤 것이 실제 컴포넌트 인지, 
데코레이터인지 명확하게 구분할 수 있다. 여기까지 고민한 것이 바로 GOF에서 설명하는 데코레이터 패턴의 기본예제이다.

6. 프록시 패턴 vs 데코레이터 패턴
여기까지 진행하면 몇가지 의문이 들 것이다.
- Decorator라는 추상 클래스를 만들어야 데코레이터 패턴일까?
- 프록시 패턴과 데코레이터 패턴은 그 모양이 거의 비슷한 것 같은데?

"의도"
사실 프록시 패턴과 데코레이터 패턴은 그 모양이 거의 같고, 상황에 따라 정말 똑같을 때도 있다. 그러면 둘을 어떻게 구분하는 것일까?
디자인 패턴에서 중요한 것은 해당 패턴의 겉모양이 아니라 그 패턴을 만든 의도가 더 중요하다. 따라서 의도에 따라 패턴을 구분한다.
- 프록시 패턴의 의도 : 다른 개체에 대한 '접근을 제어'하기 위해 대리자를 제공
- 데코레이터 패턴의 의도 : '객체에 추가 책임(기능)을 동적으로 추가'하고, 기능 확장을 위한 유연한 대안 제공

7. 인터페이스 기반 프록시 - 적용
인터페이스와 구현체가 있는 V1 App에 지금까지 학습한 프록시를 도입해서 LogTrace를 사용해보자.
"프록시를 사용하면 기존 코드를 전혀 수정하지 않고 로그 추적 기능을 도입할 수 있다."

8. V1 프록시 런타임 객체 의존 관계
client → <<Proxy>> orderControllerProxy → orderControllerV1Impl → <<Proxy>> orderServiceProxy → orderServiceV1Impl

9. V1 프록시 런타임 객체 의존 관계 설정
@Configuration
public class InterfaceProxyConfig {
    @Bean
    public OrderControllerV1 orderController(LogTrace logTrace){
        OrderControllerV1Impl controllerImpl = new OrderControllerV1Impl(orderService(logTrace));
        return new OrderControllerInterfaceProxy(controllerImpl, logTrace);
    }

    @Bean
    public OrderServiceV1 orderService(LogTrace logTrace){
        OrderServiceV1Impl serviceImpl = new OrderServiceV1Impl(orderRepository(logTrace));
        return new OrderServiceInterfaceProxy(serviceImpl, logTrace);
    }

    @Bean
    public OrderRepositoryV1 orderRepository(LogTrace logTrace) {
        OrderRepositoryV1Impl repositoryImpl = new OrderRepositoryV1Impl();
        return new OrderRepositoryInterfaceProxy(repositoryImpl,logTrace);
    }
}

- 이제 프록시의 런타임 객체 의존관계를 설정했다. 스프링 빈이 orderControllerV1Impl, orderServiceV1Impl 같은 실제 객체를 반환했다.
하지만 이제는 프록시를 의존해야 한다. 따라서 프록시를 생성하고 프록시를 실제 스프링 빈 대신 등록한다. 실제 객체는 스프링 빈으로 등록하지 않는다.
- 프록시는 내부에 실제 객체를 참고하고 있다. 예를 들어서 OrderServiceImterfaceProxy는 내부에 실제 대상 객체인 OrderSercieImpl을 가지고 있다.
- 정리하면 다음과 같은 의존관계를 가지고 있다.
	- proxy → target
	- orderServiceInterfaceProxy → orderServiceV1Impl
- 스프링 빈으로 실제 객체 대신에 프록시 객체를 등록했기 때문에 앞으로 스프링 빈을 주입받으면 "실제 객체 대신에 프록시 객체가 주입"된다.
- 실제 객체가 스프링 빈으로 등록되지 않는다고 해서 사라지는 것은 아니다. 프록시 객체가 실제 객체를 참조하기 때문에 프록시를 통해서
실제 객체를 호출할 수 있다. 
- 프록시 객체는 스프링 컨테이너가 관리하고 자바 힙 메모리에도 올라간다. 반면에 실제 객체는 자바 힙 메모리에는 올라가지만 스프링 컨테이너가 관리하지는 않는다.

10. 구체 클래스 기반 프록시
지금까지 인터페이스를 기반으로 프록시를 도입했다. 그런데 자바의 다형성은 인터페이스를 구현하든, 아니면 클래스를 상속하든 상위 타입만 맞으면 다형성이 적용된다.
쉽게 이야기해서 인터페이스가 없어도 프록시를 만들수 있다. 그래서 이번에는 인터페이스가 아닌 클래스를 기반으로 상속을 받아서 프록시를 만들어본다.
 @Test
    void addProxy(){
        ConcreteLogic concreteLogic = new ConcreteLogic();
        TimeProxy timeProxy = new TimeProxy(concreteLogic);
        ConcreteClient client = new ConcreteClient(timeProxy);
        client.execute();
    }

- 여기서 핵심은 ConcreteClient의 생성자에 concreteLogic이 아니라 timeProxy를 주입하는 부분이다.
ConcreteClient는 ConcreteLogic을 의존하는데, 다형성에 의해 ConcreteLogic에 concreteLogic도 들어갈 수 있고, timeProxy도 들어갈 수 있다.

* 참고 *
자바 언어에서 다형성은 인터페이스나 클래스를 구분하지 않고 모두 적용된다. 해당 타입과 그 타입의 하위타입은 모두 다향성의 대상이 된다.

11. 클래스 기반 프록시의 단점
- super(null) : OrderServiceV2 자바 기본 문법에 의해 자식 클래스를 생성할 때는 항상 super()로 부모 클래스의 생성자를 호출해야 한다.
이 부분을 생략하면 기본 생성자가 호출된다. 그런데 부모 클래스인 OrderServiceV2는 기본 생성자가 없고, 생성자에서 파라미터 1개를 필수로 받는다.
따라서 파라미터를 넣어서 super(..)를 호출해야 한다.
- 프록시는 부모 객체의 기능을 사용하지 않기 때문에 super(null)을 입력해도 된다.
- 인터페이스 기반 프록시는 이런 고민을 하지 않아도 된다.

12. 인터페이스 기반 프록시와 클래스 기반 프록시 정리
"프록시"
프록시를 사용한 덕분에 원본 코드를 전혀 변경하지 않고, v1,v2 애플리케이션에 LogTrace기능을 적용할수 있었다.

- 인터페이스가 없어도 클래스 기반으로 프록시를 생성할 수 있었다
- 클래스 기반 프록시는 해당 클래스에만 적용할 수 있다. 인터페이스 기반 프록시는 인터페이스만 같으면 모든 곳에 적용할 수 있다.
- 클래스 기반 프록시는 상속을 사용하기 때문에 몇가지 제약이 있다.
	- 부모 클래스의 생성자를 호출해야한다.
	- 클래스에 final 키워드가 붙으면 상속이 불가능하다.
	- 메서드에 final 키워드가 붙으면 해당 메서드를 오버라이딩 할 수 있다.
이렇게 보면 인터페이스 기반의 프록시가 더 좋아보인다. 맞다. 인터페이스 기반의 프록시는 상속이라는 제약에서 자유롭다. 프로그래밍 관점에서도
인터페이스를 사용하는 것이 역할과 구현을 명확하게 나누기 때문에 더 좋다.
인터페이스 기반 프록시의 단점은 인터페이스가 필요하다는 그 자체이다. 인터페이스가 없으면 인터페이스 기반 프록시를 만들 수 없다.

* 참고 *
인터페이스 기반 프록시는 캐스팅 관련해서 단점이 있다.

이론적으로는 모든 객체에 인터페이스를 도입해서 역할과 구현을 나누는 것이 좋다. 이렇게하면 역할과 구현을 나누어서 구현체를 매우 편리하게 변경할 수 있다.
하지만 실제로는 구현을 거의 변경할 일이 없는 클래스도 많다.
인터페이스를 도입하는 것은 구현을 변경할 가능성이 있을 떄 효과적인데, 구현을 변경할 가능성이 거의 없는 코드에 무작정 인터페이스를 사용하는 것은 번거롭고 그렇게
실용적이지 않다. 이런곳에는 실용적인 관점에서 인터페이스를 사용하지 않고 구체 클래스를 바로 사용하는 것이 좋다고 생각한다.

13. 너무많은 프록시 클래스
지금까지 프록시를 사용해서 기존 코드를 변경하지 않고, 로그 추적기라는 부가 기능을ㄹ 적용할 수 있었다.
그런데 문제는 프록시 클래스를 너무많이 만들어야 한다는 점이다. 잘보면 프록시 클래스가 하는일은 LogTrace를 사용하는 것인데,
그 로직이 모두 똑같다. 대상 클래스만 다를 뿐이다. 만약 적용해야 하는 대상 클래스가 100개라면 프록시 클래스도 100 개를 만들어야한다.

프록시 클래스를 하나만 만들어서 모든곳에 적용하는 방법은 없을까? - 동적 프록시 기술





