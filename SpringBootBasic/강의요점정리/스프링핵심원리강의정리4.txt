1. 빈 생명주기 콜백 
데이터베이스 커낵션 풀이나, 네트워크 소켓처럼 에플리케이션 시작 시점에 필요한 연결을 미리 해두고, 애플리케이션 종료 시점에 연결을 모두 종료하는 작업을 진행하려면,
객체의 초기화와 종료 작업이 필요하다.
스프링 빈은 간단하게 다음과 같은 라이프 사이클을 가진다.
	"객체 생성" → "의존관계 주입"
스프링 빈은 객체를 생성하고, 의존관계 주입이 다 끝난 다음에야 필요한 데이터를 사용할 준비가 완료된다.
따라서 초기화 작업은 의존관계 주입이 모두 완료되고 난 다음에 호출해야 한다. 
그런데 개발자가 의존관계 주입이 모두 완료된 시점을 어떻게 알수 있을까?
"스프링은 의존관계 주입이 완료되면 스프링 빈에게 콜백 메서드를 통해서 초기화 시점을 알려주는 다양한 기능을 제공한다."
또한 "스프링은 스프링 컨테이너가 종료되기 직전에 소멸 콜백"을 준다.

"스프링 빈의 이벤트 라이프 사이클"
스프링 컨테이너 생성 → 스프링 빈 생성 → 의존관계 주입 → 초기화 콜백 → 사용 → 소멸전 콜백 → 스프링 종료
초기화 콜백 : 빈이 생성되고, 빈의 의존관계 주입이 완료된 후 호출
소멸전 콜백 : 빈이 소멸되기 직전에 호출

* 참고 * 객체의 생성과 초기화를 분리하자.
생성자는 필수정보(파라미터)를 받고, 메모리를 할당해서 객체를 생성하는 책임을 가진다. 반면에 초기화는 이렇게 생성된 값들을 활용해서 외부 커넥션을 연결하는 등 무거운 동작을 수행한다.
따라서 생성자 안에서 무거운 초기화 작업을 함께 하는 것보다는 객체를 생성하는 부분과 초기화 하는 부분을 명확히 나누는 것이 유지보수 관점에서 좋다. 물론 초기화 작업이
내부 값들만 약간 변경하는 정도로 단순한 경우에는 생성자에서 한번에 다 처리하는게 나을 수 있다.

"스프링은 크게 3가지 방법으로 빈 생명주기 콜백을 지원한다."
- 인터페이스(InitializingBean, DisposableBean)
- 설정 정보에 초기화 메서드, 종료 메서드 지정
- @PostConstruct, @PreDestroy 애노테이션 지원

2. 인터페이스(InitializingBean, DisposableBean)
- InitializingBean은 afterPropertiesSet() 메서드로 초기화를 지원한다.
- DisposableBean은 destroy() 메서드로 소멸을 지원한다.
- 출력 결과를 보면 초기화 메서드가 주입 완료 후에 적절하게 호출 된 것을 확인할 수 있다.
- 그리고 스프링 컨테이너의 종료가 호출되자 소멸 메서드가 호출된 것도 확인할 수 있다.

"단점"
- 이 인터페이스는 스프링 전용 인터페이스이다. 해당 코드가 스프링 전용 인터페이스에 의존한다.
- 초기화, 소멸 메서드의 이름을 변경할 수 있다.
- 내가 코드를 고칠 수 없는 외부 라이브러리에 적용할 수 있다.
- 지금은 거의 사용하지 않는다.

3. 빈 등록 초기화, 소멸 메서드
- 설정 정보에 @Bean(initMethod = "init", destroyMethod = "close") 처럼 초기화, 소멸 메서드를 지정할 수 있다.
- 메서드 이름을 자유롭게 줄 수 있다.
- 스프링 빈이 스프링 코드에 의존하지 않는다.
- 코드가 아니라 설정 정보를 사용하기 때문에, 코드를 고칠 수 없는 외부 라이브러리에도 초기화, 종료 메서드를 적용할 수 있다.

"종료 메서드 추론"
- @Bean의 destroyMethod 속성에는 아주 특별한 속성이 있다.
- 라이브러리는 대부분 close, shutdown이라는 이름의 종료 메서드를 사용한다.
- @Bean의 destroyMethod는 기본값이 inferred(추론)으로 등록되어 있다.
- 이 추론 기능은 close, shutdown라는 이름의 메서드를 자동으로 호출해준다. 이름 그대로 종료 메서드를 추론해서 호출해준다.
- 따라서 직접 스프링 빈으로 등록하면 종료 메서드는 따로 적어주지 않아도 잘 동작한다.
- 추론 기능을 사용하기 싫으면 destroyMethod는=""처럼 빈 공백을 지정하면 된다.

4. 애노테이션 @PostConstruct, @PreDestroy - 얘를 쓰면 된다!!, 스프링에서도 얘를 권고한다!!
- 유일한 단점은 외부 라이브러리에 적용못한다. 외부 라이브러리를 초기화, 종료해야하면 @Bean의 기능을 사용하자.

5. 빈 스코프란?
지금까지 우리는 스프링 빈이 스프링 컨테이너의 시작과 함께 생성되어서 스프링 컨테이너가 종료될때까지 유지된다고 학습했다. 이것은 스프링 빈이 기본적으로 싱글톤 스코프로 생성되기 때문이다.
스코프는 빈이 그래도 빈이 존재할 수 있는 범위를 뜻한다.
" 스프링은 다음과 같은 다양한 스코프를 지원한다."
- 싱글톤 : 기본 스코프, 스프링 컨테이너의 시작과 종료까지 유지되는 가장 넓은 범위의 스코프이다.
- 프로토타입: 스프링 컨테이너는 프로토타입 빈의 생성과 의존관계 주입까지만 관여하고 더는 관리하지 않는 매우 짧은 범위의 스코프이다.
	@Scope("prototype")
- 웹 관련 스코프
	- request: 웹 요청이 들어오고 나갈때까지 유지되는 스코프 이다.
	- session : 웹 세션이 생성되고 종료될때까지 유지되는 스코프이다.
	- application : 웹의 서블릿 컨텍스와 같은 범위로 유지되는 스코프이다.

6. 프로토타입 스코프
싱글톤 스코프의 빈을 조회하면 스프링 컨테이너는 항상 같은 인스턴스의 스프링 빈을 반환한다. 반면에 프로토타입 스코프를 스프링 컨테이너에 요청하면 스프링 컨테이너는 항상 새로운
인스턴스를 생성하고 필요한 의존관계를 주입 후 클라이언트에 반환한다.
여기서 핵심은 스프링 컨테이너는 프로토타입 빈을 생성하고, 의존관계 주입, 초기화까지만 처리한다는 것이다. 클라이언트에 빈을 반환하고 이후 스프링 컨테이너는 생성된 프로토타입
빈을 관리하지 않는다. 프로토타입 빈을 관리할 책임은 프로토타입 빈을 받은 클라이언트에 있다. 그래서 @PreDestroy 같은 종료 메서드가 호출되지 않는다.

- 싱글톤 빈은 스프링 컨테이너 생성 시점에 초기화 메서드가 실행 되지만, 프로토타입 스코프의 빈은 스프링 컨테이너에서 빈을 조회할때 생성되고, 초기화 메서드도 실행된다.
- 프로토타입 빈을 2번 조회했으므로 완전히 다른 스프링 빈이 생성되고, 초기화도 2번 실행된 것을 확일할 수 있다.
- 싱글톤 빈은 스프링 컨테이너가 관리하기 때문에 스프링 컨테이너가 종료될 때 빈의 종료 메서드가 실행되지만, 
프로토타입 빈은 스프링 컨테이너가 생성과 의존관계 주입 그리고 초기화까지 관여하고, 더는 관리하지 않는다.
- 따라서 프로토타입 빈은 스프링 컨테이너가 종료될때 @PreDestroy 같은 종료 메서드가 전혀 실행되지 않는다.
- 그래서 프로토타입 빈은 빈을 조회한 클라이언트가 관리해야 한다. 종료 메서드에 대한 호출도 클라이언트가 직접 해야한다.

7. 프로토타입 스코프 - 싱글톤 빈과 함께 사용시 문제점
스프링 컨테이너에서 프로토타입 빈을 요청하면 항상 새로운 객체 인스턴스를 생성해서 반환한다. 하지만 싱글톤 빈과 함께 사용할떄는 의도한 대로 잘 동작하지 않으므로 주의해야한다.
<예제 상황>
- clientBean은 싱글톤 빈이다. 그래서 스프링 컨테이너 생성 시점에 함께 생성되고, 의존관계 주입도 발생한다.
- clientBean은 의존관계 자동 주입을 사용한다. 주입 시점에 스프링 컨테이너에 프로토타입 빈을 요청한다.
- 스프링 컨테이너는 프로토타입 빈을 생성해서 clientBean에 반환한다ㅣ. 프로토타입 빈의 count 필드 값은 0이다.
- 이제 clientBean은 프로토타입 빈을 내부 필드에 보관한다. (정확히는 참조값을 보관한다.)
- 클라이언트 A는 clientBean을 스프링 컨테이너에 요청해서 받는다. 싱글톤이므로 항상 같은 clientBean이 반환된다.
- 클라이언트 A는 clientBean.logic()을 호출한다.
- clientBean은 prototypeBean의 addCount()를 호출해서 프로토타입 빈의 count를 증가한다. count값이 1이 된다.
- 클라이언트 B는 clientBean을 스프링 컨테이너 요청해서 받는다. 싱글톤이므로 항상 같은 clientBean이 반환된다.
"여기서 중요한 점이 있는데 clientBean이 내부에 가지고 있는 프로토타입 빈은 이미 과거에 주입이 끝난 빈이다. 주입 시점에 스프링 컨테이너에 요청해서
프로토타입 빈이 새로 생성된 것이지, 사용할 때 마다 새로 생성되는 것이 아니다."
- 클라이언트 B는 client.logic()을 호출한다.
- clientBean은 prototypeBean의 addCount()를 호출해서 프로토타입 빈의 count를 증가한다. 원래 count 값이 1이 였으므로 2가 된다.

스프링은 일반적으로 싱글톤 빈을 사용하므로, 싱글톤 빈이 프로토타입 빈을 사용하게 된다. 그런데 싱글톤 빈은 생성 시점에만 의존관계가 주입을 받기 떄문에, 프로토타입 빈이
생성되기는 하지만 싱글톤 빈과 함께 계속 유지되는 것이 문제다.

8. 프로토타입 스코프 - 싱글톤 빈과 함께 사용시 Provider로 문제 해결
싱글톤 빈과 프로토타입 빈을 함께 사용할 때, 어떻게 하면 사용할 때 마다 항상 새로운 프로토타입 빈을 생성할 수 있을까?
DL (Dependency Lookup) : 직접 필요한 의존관계를 찾는 것을 의존관계 조회(탐색)이라 한다.

9. ObjectProvider, ObjectFactory
- 지정한 빈을 컨테이너에서 대신 찾아주는 DL 서비스를 제공하는 것이 바로 ObjectProvider이다. 참고로 과거에는 ObjectFactory가 있었는데, 여기에 편의 기능을 추가해서
ObjectProvider가 만들어졌다.
- 실행해보면 prototypeBeanProvider.getObject()를 통해서 새로운 프로토타입 빈이 생성되는 것을 확인할 수 있다.
- ObjectProvider의 getObject()를 호출하면 내부에서는 스프링 컨테이너를 통해 해당 빈을 찾아서 반환한다.
- ObjectProvider는 DL정도의 기능만 제공한다.
- 스프링에 의존한다.
10. JSR-330 Provider
마지막 방법은 javax.inject.Provider라는 JSR-330 자바 표준을 사용하는 방법이다.
이 방법을 사용하면 javax.inject:javax.inject:1 라이브러리를 추가해줘야한다.
- get() 메서드 하나로 기능이 매우 단순하다
- 자바 표준이므로 스프링이 아닌 다른 컨테이너에서도 사용할 수 있다.

11. 웹 스코프
- 웹 스코프는 웹 환경에서만 동작한다.
- 웹 스코프는 프로토타입과 다르게 스프링이 해당 스코프의 종료시점까지 관여한다. 따라서 종료 메서드가 호출된다.
	- request : HTTP요청 하나가 들어오고 나갈 때 까지 유지되는 스코프, 각각의 HTTP 요청마다 별도의 빈 인스턴스가 생성되고 관리된다.
	- session : HTTP session과 동일한 생명주기를 가지는 스코프
	- application : 서플릿 컨텍스트(servletContext)와 동일한 생명주기를 가지는 스코프
	- websocket : 웹 소켓과 동일한 생명주기를 가지는 스코프