0. 스프링 빈 설정 메타 정보 - BeanDefinition
- 스프링은 어떻게 이런 다양한 설정 형식을 지원하는 것일까? 그 중심에는 BeanDefinition이라는 추상화가 있다.
- 역할과 구현을 개념적으로 나눈 것
- 스프링 컨테이너는 자바코드인지, XML인지 몰라도 된다. 오직 BeanDefinition만 알면된다.
- BeanDefinition은 빈 설정 메타정보라 한다.
	- @Bean당 각각 하나씩 메타정보가 생성된다.
- 스프링 컨테이너는 이 메타정보를 기반으로 스프링 빈을 생성한다.
- ApplicationConfigApplicationContext는 AnnotationBeanDefinitionReader를 사용해서 AppConfig.class를 읽고 BeanDefinition을 생성한다.
- 새로운 형식의 설정 정보가 추가되면 AnnotationBeanDefinitionReader를 만들어서 BeanDefinition을 생성하면된다.


1. 웹 어플리케이션과 싱글톤
- 우리가 이전에 만들었던 AppConfig는 요청을 할 때 마다 객체를 새로 생성한다.
- 메모리 낭비가 심하다
- 해결방안은 해당 객체가 딱 1개만 생성되고, 공유하도록 설계하면 된다 -> 싱글톤 패턴

2. 싱글톤 패턴
- 클래스의 인스턴스가 딱 1개만 생성되는 것을 보장하는 디자인 패턴이다.
- 그래서 객체 인스턴스를 2개이상 생성하지 못하도록 막아야 한다.
	- private 생성자를 사용해서 외부에서 임의로 new 키워드를 사용하지 못하도록 막아야 한다.

public class SingletonService {
	1. static 영역에 객체를 딱 1개만 생성한다.
	private static final SingletonService instance = new SingletonService();
	2. public으로 열어서 객체 인스턴스가 필요하면 이 static 메서드를 통해서만 조회하도록 허용한다.
	public static SingletonService getInstance() {
		return instance;
	}
	3. 생성자를 private으로 선언해서 외부에서 new 키워드를 사용한 객체 생성을 못하게 막는다.
	private SingletonService() {}
}

3. 싱글톤 패턴의 문제점
- 싱글톤 패턴을 구현하는 코드 자체가 많이 들어간다.
- 의존관계상 클라이언트가 구체 인스턴스에 의존한다. -> DIP 위반
- 테스트하기 어렵다.
- 내부 속성을 변경하거나 초기화 하기 어렵다.
- private 생성자로 자식 클래스를 만들기 어렵다.
- 결과적으로 유연성이 떨어진다.
- 안티패턴이라 불리기도 한다.

4. 싱글톤 컨테이너
스프링 컨테이너는 싱글톤 패턴의 문제점을 해결하면서, 객체 인스턴스를 싱글톤(1개만 생성)으로 관리한다.
지금까지 우리가 학습한 스프링 빈이 바로 싱글톤으로 관리되는 빈이다.
- 스프링 컨테이너는 싱글턴 패턴을 적용하지 않아도, 객체 인스턴스를 싱글톤으로 관리한다.
- 스프링 컨테이너는 싱글톤 컨테이너 역할을 한다. 이렇게 싱글톤 객체를 생성하고 관리하는 기능을 싱글톤 레지스트리라 한다.
- 스프링 컨테이너는 이런 기능 덕분에 싱글턴 패턴의 모든 단점을 해결하면서 객체를 싱글톤으로 유지할 수 있다.
	- DIP, OCP, 테스트, private 생성자로부터 자유롭게 싱글톤을 사용할 수 있다.
- 스프링 컨테이너 덕분에 고객의 요청이 들어올 때 마다 객체를 생성하는 것이 아니라, 이미 만들어진 객체를 공유해서 효율적으로 재사용한다.

* 참고*
스프링의 기본 빈 등록 방식은 싱글톤이지만, 싱글톤 방식만 지원하는 것은 아니다. 요청할 때 마다 새로운 객체를 생성해서 반환하는 기능도 제공한다.

5. 싱글톤 방식의 주의점
- 싱글톤 패턴이던, 스프링 같은 컨테이너를 사용하던, 객체 인스턴스를 하나만 생성해서 공유하는 싱글톤 방식은 여러 클라이언트가 하나의 같은 객체 인스턴스를 공유하기 때문에
싱글톤 객체는 상태를 유지(stateful)하게 설계하면 안된다.
- 무상태(stateless)로 설계해야한다.
	- 특정 클라이언트에 의존적인 필드가 있으면 안된다.
	- 특정 클라이언트가 값을 변경할 수 있는 필드가 있으면 안된다.
	- 가급적 읽기만 가능해야 한다.
	- 필드 대신에 자바에서 공유되자 않는 지역변수, 파라미터, ThreadLocal 등을 사용해야 한다.
- 스프링 빈의 필드에 공유 값을 설정하면 정말 큰 장애가 발생할 수 있다.

6. @Configuration 싱글톤
- 확인해보면 memberRepository 인스턴스는 모두 같은 인스턴스가 공유된다.
- AppConfig 자바 코드를 보면 분명히 각각 2번 new MemoryMemberRepository 호출해서 다른 인스턴스가 생성되어야 하는데?
- 모든 비밀은 @Configuration의 AppConfig
- @Bean이 붙은 메서드마다 이미 스프링 빈이 존재하면 존재하는 빈을 반환하고, 스프링 빈이 없으면 생성해서 스프링 빈으로 등록하고 반환하는 코드가 동적으로 만들어진다.
- 덕분에 싱글톤이 보장되는 것이다.


7. 컴포넌트 스캔과 의존관계 자동 주입 
- 스프링은 설정 정보가 없어도 자동으로 빈을 등록하는 컴포넌트 스캔이라는 기능을 제공
- 의존관계도 자동으로 주입하는 @Autowired 기능도 제공
- 이전에는 AppConfig에서는 @Bean으로 직접 설정 정보를 작성했고, 의존관계도 직접 명시했다. 이제는 이런 설정 정보 자체가 없기 때문에,
의존관계 주입도 이 클래스 안에서 해결해야 한다.
- @Autowired는 의존관계를 자동으로 주입해준다.  

8. @ComponentScan
- @ComponentScan은 @Component가 붙은 모든 클래스를 스프링 빈으로 등록한다.
- 이때 스프링 빈의 기본 이름은 클래스명을 사용하되 맨 앞글자만 소문자를 사용한다.
	- 빈이름 기본 전략 : MemberServiceImpl클래스 -> memberServiceImpl
	- 빈이름 직접 지정 : 만약 스프링 빈의 이름을 직접 지정하고 싶으면 @Component("memberServiceImpl") 이름을 부여하면된다.
	
9. @Autowired
- 생성자에 @Autowired를 지정하면, 스프링 컨테이너가 자동으로 해당 스프링 빈을 찾아서 주입한다.
- 이때 기본 조회 전략은 타입이 같은 빈을 찾아서 주입한다.
	- @getBean(MemberRepository.class)와 동일하다고 이해하면 된다.

10. 컴포넌트 스캔 탐색 위치와 기본 스캔 대상
@ComponentScan(
	basePackages = "hello.core",
)
- 탐색할 패키지의 시작 위치 지정
- 모든 자바 클래스를 다 컴포넌트 스캔하면 시간이 오래걸린다. 그래서 꼭 필요한 위치부터 탐색하도록 시작 위치를 지정할 수 있다.
- basePackages : 탐색할 패키지의 시작 위치를 지정한다. 이 패키지를 포함해서 하위 패키지를 모두 탐색한다.
	- basePackages = {"hello.core", "hello.service"} 이렇게 여러 시작 위치를 지정할 수도 있다.
- basePackageClasses : 지정한 클래스의 패키지를 탐색 시작 위로 지정한다.
- 만약 지정하지 않으면 @ComponentScan이 붙은 설정 정보 클래스의 패키지가 시작 위치가 된다.

* 권장하는 방법 *
개인적으로 즐겨 사용하는 방법은 패키지 위치를 지정하지 않고, 설정 정보 클래스의 위치를 프로젝트 최상단에 두는것이다. 최근 스프링 부트도 이 방법을 기본으로 제공한다.

* 참고 *
참고로 스프링 부트를 사용하면 스프링 부트의 대표 시작 정보인 @SpringBootApplication를 이 프로젝트 시작 루트 위치에 두는 것이 관례이다. 
그리고 이 설정 안에 바로 @ComponentScan이 들어있다. 

11. 컴포넌트 스캔 기본 대상
- 컴포넌트 스캔은 @Component 다음의 내용도 추가로 대상에 포함된다.
	- @Component : 컴포넌트 스캔에서 사용
	- @Controller : 스프링 MVC 컨트롤러로 인식
	- @Service : 스프링 비즈니스 로직에서 사용
	- @Repository : 스프링 데이터 접근 계층으로 인식하고, 데이터 계층의 예외를 스프링 예외로 변환해준다.
	- @Configuration : 스프링 설정 정보로 인식하고, 스프링 빈이 싱글톤을 유지하도록 추가 처리를 한다.

* 참고 *
useDefaultFilters 옵션은 기본으로 켜져있는데, 이 옵션을 끄면 기본 스캔 대상들이 제외된다.

12. 필터
IncludeFilters : 컴포넌트 스캔 대상을 추가로 지정한다.
ExcludeFilters : 컴포넌트 스캔에서 제외할 대상으로 지정한다.

13. 다양한 의존관계 주입 방법
의존관계 주입은 크게 4가지 방법이 있다.
- 생성자 주입
	- 이름 그대로 생성자를 통해서 의존관계를 주입하는 방법이다.
	- 특징
		- 생성자 호출시점에 딱 1번만 호출되는 것이 보장된다.
		- "불변, 필수" 의존관계에서 사용
		- 생성자가 딱 한개만 있으면 @Autowired 생략 가능
		
- 수정자 주입(setter 주입)
	- setter라 불리는 필드의 값을 변경하는 수정자 메서드를 통해 의존관계를 주입하는 방법
	- 특징
		- "선택, 변경" 가능성 있는 의존관계에 사용
* 참고 *
@Autowired의 기본 동작은 주입할 대상이 없으면 오류가 발생한다. 주입할 대상이 없어도 동작하게 하려면 @Autowired(required = false)로 지정하면 된다.
- 필드 주입
	- 사용하지 말자.
- 일반 메서드 주입

14. 옵션처리
주입할 스프링 빈이 없어도 동작할 때가 있다.
그런데 @Autowired만 사용하면 required 옵션의 기본값이 true로 되어있어서 자동 주입 대상이 없으면 오류가 발생한다.
자동 주입 대상을 옵션으로 처리하는 방법은 다음과 같다.
- @Autowired(required = false) : 자동 주입할 대상이 없으면 수정자 메서드 자체가 호출이 안됨
- org.springframework.lang.@Nullable : 자동 주입할 대상이 없으면 null이 입력된다.
- Optional<> : 자동 주입할 대상이 없으면 Optional.empty가 입력된다.

15. 생성자 주입을 선택 해라
과거에는 수정자 주입과 필드 주입을 많이 사용했지만, 최근에는 스프링을 포함한 DI 프레임워크 대부분이 생성자 주입을 권장한다.
"불변"
- 대부분의 의존관계 주입은 한번 일어나면 애플리케이션 종료시점까지 의존관계를 변경할 일이 없다. 오히려 대부분의 의존관계는
애플리케이션 종료 전까지 변하면 안된다.
- 수정자 주입을 사용하면 setXxx메서드를 public으로 열어두어야 한다. -> 좋은 설계 방법이 아니다.
- 생성자 주입은 객체를 생성할 때 딱 1번만 호출되므로 이후에 호출되는 일이 없다. 따라서 불현하게 설계할 수 있다.
"누락"
- 생성자 주입을 사용하면 주입 데이터가 누락 했을 때 "컴파일 오류"가 발생한다.
"final 키워드"
- 생성자 주입을 사용하면 필드에 final 키워드를 사용할 수 있다. 그래서 생성자에서 혹시라도 값이 설정되지 않는 오류를 컴파일 시점에 막아준다.

항상 생성자 주입을 선택해라! 그리고 가끔 옵션이 필요하면 수정자 주입을 선택해라.

16. 롬복과 최신 트랜드
- 막상 개발해보면 대부분이 다 불변이고, 그래서 다음과 같이 생성자에 final 키워드를 사용하게 된다.
- 생성자가 하나있으면 @Autowired 생략 가능
- @RequiredArgsConstructor : final이 붙은 필드를 모아서 생성자를 자동으로 만들어준다

17. @Autowired 필드명, @Qulifier, @Primary
조회 대상 빈이 2개 이상일 때 해결방법
- @Autowired 필드 명 매칭
	- @Autowired는 타입 매칭을 시도하고, 이때 여러 빈이 있으면 필드 이름(파라미터 이름)으로 빈 이름을 추가 매칭한다.
- @Qulifier -> @Qulifier 끼리 매칭 -> 빈 이름 매칭
	- 추가 구분자를 붙여주는 방법이다. 주입시 추가적인 방법을 제공하는것이지 빈 이름을 변경하는 것은 아니다.
	- @Qualifier로 주입할때 @Qulifier("mainDiscountPolicy")를 못찾으면 어떻게 될까?
	- 그러면 mainDiscountPolicy라는 이름의 스프링 빈을 추가로 찾는다. 하지만 경험상 @Qulifier는 @Qualifier를 찾는 용도로만 사용하는게 명확하고 좋다.
- @Primary 사용
	- @Primary는 우선순위를 정하는 방법이다.
- 우선순위
	- @Primary는 기본값처럼 동작하는 것이고, @Qulifier는 매우 상세하게 동작한다. 이런 경우 어떤것이 우선권을 가져갈까?
	- 스프링은 자동보다는 수동이, 넓은 범위의 선택권보다는 좁은 범위의 선택권이 우선순위가 높다. 따라서 여기서도 @Qualifier 가 우선순위가 높다.
	
18. 조회된 빈이 모두 필요할 때, List, Map
- 의도적으로 정말 해당 타입의 스프링 빈이 다 필요한 경우가 있다.
- 예를 들어서 할인 서비스를 제공하는데, 클라이언트가 할인의 종류(rate, fix)를 선택할 수 있다고 가정해보자.
- 스프링을 사용하면 소위 말하는 전략 패턴을 매우 간단하게 구현할 수 있다.

19. 자동, 수동의 올바른 실무 기준
"편리한 자동 기능을 기본으로 사용하자"
- 자동 빈 등록을 사용해도 OCP, DIP를 지킬 수 있다.

"그러면 수동 빈 등록은 언제 사용하면 좋을까?"
"애플리케이션 광범위하게 영향을 미치는 기술 지원 객체는 수동 빈으로 등록해서 딱! 설정 정보에 바로 나타나게 하는 것이 유지보수 하기 좋다."
업무 로직: 웹을 지원하는 컨트롤러, 핵심 비즈니스 로직이 있는 서비스, 데이터 계층의 로직을 처리하는 리포지토리들이 모두 업무 로직이다. 
보통 비즈니스 요구사항을 개발할떄 추가되거나 변경된다.
기술 지원 빈 : 기술적인 문제나 공통 관심사(AOP)를 처리할 때 주로 사용한다. 데이터베이스 연결이나, 공통 로그 처리처럼 업무 로직을 지원하기 위한 하부 기술이나 공통 기술들이다.

- 업무로직은 숫자도 매우 많고 한번 개발해야하면 컨트롤러, 서비스, 리포지토리 처럼 어느정도 유사한 패턴이 있다. 이런 경우 자동 기능을 적극 사용하는 것이 좋다.
보통 문제가 발생해도 어떤 곳에서 발생했는지 명확하게 파악하기 쉽다.
- 기술지원로직은 업부 로직과 비교해서 그 수가 매우 적고, 보통 애플리케이션 전반에 걸쳐서 광범위하게 영향을 미친다. 그리고 업무 로직은 문제가 발생했을 때 어디가 문제인지
명확하게 잘 드러나지만, 기술 지원 로직은 적용이 잘되고 있는지 아닌지 조차 파악이 어려운 경우가 있다. 그래서 이런 기술 지원 로직들은 가급적 수동 빈 등록을 사용해서
명확하게 드러내는 것이 좋다.

"비즈니스 로직 중에서 다형성을 적극 활용할 때"
의존관계 자동 주입, 조회한 빈이 모두 필요할 때 List와 Map을 다시 보자.
DiscountService가 의존관계 자동 주입으로 Map<String, DiscountPolicy>에 주입을 받는 상황을 생각해보자.
여기에 어떤 빈들이 주입될지, 각 빈들의 이름은 무엇일지 코드만 보고 쉽게 파악할수 있을까? 자동 등록을 사용하고 있기 때문에 파악하려면 여러 코드를 찾아봐야 한다.
이런경우 수동 빈으로 등록하거나 또는 자동으로하면 "특정 패키지에 같이 묶어"두는게 좋다. 


