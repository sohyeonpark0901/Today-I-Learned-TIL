## 객체 지향 설계와 스프링
1. 스프링 핵심
- 스프링은 자바 언어 기반의 프레임워크
- 자바 언어의 가장큰 특징 : 객체 지향 언어
- 스프링은 좋은 객체 지향 애플리케이션을 개발할 수 있게 도와주는 프레임워크

2. 자바의 다형성 활용
- 역할 = 인터페이스
- 구현 = 인터페이스를 구현한 클래스, 구현 객체
- 객체를 설계할때 역할과 구현을 명확히 분리
- 객체 설계 시 역할(인터페이스)를 먼저 부여하고, 그 역할을 수행하는 구현 객체 만들기

3. 오버라이딩
- 메소드 오버라이딩을 통해 상속받은 부모 클래스의 메소드를 자식 클래스에서 직접 재정의
- 다형성으로 인터페이스를 구현한 객체를 실행 시점에 유연하게 변경할 수 있다
- 물론 클래스 상속 관계도 다형성, 오버라이딩 적용 가능

4. 좋은 객체 지향의 5가지 원칙 SOLID
- SRP : 한 클래스는 하나의 책임만 가져야 한다.
	    변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것
- OCP : 확장에는 열려있으나 변경에는 닫혀있다.
		인터페이스를 구현한 새로운 클래스를 하나 만들어서 새로운 기능 구현
		객체를 생성하고, 연관관계를 맺어주는 별도의 조립, 설정자가 필요하다.
- LSP : 프로그램의 객체는 프로그램의 정확성을 깨드리지 않으면서 하위 타입의 인스턴스로 바꿀수 있어야 한다
		다형성을 지원하기 위한 원칙
- ISP : 특정 클라이언트를 위한 인터페이스 여러개가 범용 인터페이스 하나보다 낫다
		인터페이스가 명확해지고, 대체 가능성이 높아진다
- DIP : 추상화에 의존해야지, 구체화에 의존하면 안된다.
		구현 클래스에 의존하지 말고, 인터페이스에 의존하라
		인터페이스에 의존해야 유연하게 구현체를 변경할 수 있다.

5. 관심사의 분리 - AppConfig 등장
- 애플리케이션의 전체 동작 방식을 구성(config)하기 위해 구현 객체를 생성하고,
연결하는 책임을 가지는 별도의 설정 클래스
- AppConfig는 애플리케이션의 실제 동작에 필요한 구현 객체를생성한다
- AppConfig 생성한 객체 인스턴스의 참조를 생성자를 통해서 주입(연결) 해준다.

6. 생성자 주입
- 객체가 생성자를 주입한다
public class AppConfig{
	
	public MemberService memberservice(){
		return new MemberService(new MemberRepository());
		}
	}

public class MemberServiceImpl implements Memberservice(){
	
	private final MemberRepository memberRepository;
	public MemberServiceImpl(MemberRepository memberRepository){
		this.memberRepository = memberRepository;
		}
	}
- MemberServiceImpl 생성자를 통해서 어떤 구현 객체를 주입할지는 오직 외부 AppConfig에서 결정
- 객체 생성과 연결은 AppConfig가 담당한다
- 관심사이 분리 : 객체를 생성하고 연결하는 역할과 실행하는 역할이 명확히 분리
- appConfig 객체는 memoryMemberRepository 객체를 생성하고 참조값을 memberServiceImpl을 
생성하면서 생성자로 전달한다
- 클라이언트인 memberServiceImpl 입장에서 보면 의존관계를 마치 외부에서
주입해주는 것 같다고 해서 DI 우리말로 의존관계 주입 또는 의존성 주입이라 한다